// Copyright 2021 The FlutX Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// ignore_for_file: deprecated_member_use_from_same_package

/// There are mainly 13 types of Text widgets.
/// h1,h2,h3,h4,h5,h6,sh1,sh2,b1,b2,button,caption,overline - This is the order of its size.
library;

import 'package:flutter/material.dart';
import 'package:terrarium_idle/widgets/base/text/text_style.dart';

class SText extends StatelessWidget {
  //Key

  final String text;
  final TextStyle? style;
  // không sửa biến này, nếu muốn ghi đè textstyle dùng [style]
  final STextTheme? textTheme;
  final bool muted, xMuted;
  final double? letterSpacing;
  final Color? color;
  final TextDecoration? decoration;
  final double? height;
  final double? wordSpacing;
  final double? fontSize;
  final FontStyle? fontStyle;
  final FontWeight? fontWeight;
  final Color? backGroundColor;
  final TextDirection? textDirection;
  final int? maxLines;
  final TextAlign? textAlign;
  final Color? decorationColor;
  final TextStyle? textStyle;
  final Paint? background;
  final TextDecorationStyle? textDecorationStyle;
  final TextBaseline? textBaseline;
  final List<Shadow>? shadow;
  final Locale? locale;
  final double? decorationThickness;
  final List<FontFeature>? fontFeatures;
  final Paint? foreground;
  final TextOverflow? overflow;
  final Color? selectionColor;
  final String? semanticsLabel;
  final bool? softWrap;
  final StrutStyle? strutStyle;
  final TextHeightBehavior? textHeightBehavior;
  final TextScaler? textScaler;
  final TextWidthBasis? textWidthBasis;

  const SText(
    this.text, {
    super.key,
    this.style,
    this.textTheme,
    this.muted = false,
    this.xMuted = false,
    this.letterSpacing,
    this.color,
    this.decoration,
    this.height,
    this.wordSpacing,
    this.fontSize,
    this.textAlign,
    this.maxLines,
    this.locale,
    this.overflow,
    this.semanticsLabel,
    this.softWrap,
    this.strutStyle,
    this.textDirection,
    this.textHeightBehavior,
    this.textScaler,
    this.selectionColor,
    this.textWidthBasis,
    this.fontStyle,
    this.backGroundColor,
    this.decorationColor,
    this.textStyle,
    this.background,
    this.textDecorationStyle,
    this.textBaseline,
    this.shadow,
    this.decorationThickness,
    this.fontFeatures,
    this.fontWeight,
    this.foreground,
  });

  const SText.displayLarge(this.text,
      {this.style,
      this.textTheme = STextTheme.displayLarge,
      this.muted = false,
      this.xMuted = false,
      this.letterSpacing,
      this.color,
      this.selectionColor,
      this.decoration,
      this.height,
      this.wordSpacing,
      this.fontSize,
      super.key,
      this.textAlign,
      this.maxLines,
      this.locale,
      this.overflow,
      this.semanticsLabel,
      this.softWrap,
      this.strutStyle,
      this.textDirection,
      this.textHeightBehavior,
      this.textScaler,
      this.textWidthBasis,
      this.fontStyle,
      this.backGroundColor,
      this.decorationColor,
      this.textStyle,
      this.background,
      this.textDecorationStyle,
      this.textBaseline,
      this.shadow,
      this.decorationThickness,
      this.fontFeatures,
      this.foreground,
      this.fontWeight});

  const SText.displayMedium(this.text,
      {this.style,
      this.textTheme = STextTheme.displayMedium,
      this.muted = false,
      this.xMuted = false,
      this.letterSpacing,
      this.color,
      this.selectionColor,
      this.decoration,
      this.height,
      this.wordSpacing,
      this.fontSize,
      super.key,
      this.textAlign,
      this.maxLines,
      this.locale,
      this.overflow,
      this.semanticsLabel,
      this.softWrap,
      this.strutStyle,
      this.textDirection,
      this.textHeightBehavior,
      this.textScaler,
      this.textWidthBasis,
      this.fontStyle,
      this.backGroundColor,
      this.decorationColor,
      this.textStyle,
      this.background,
      this.textDecorationStyle,
      this.textBaseline,
      this.shadow,
      this.decorationThickness,
      this.fontFeatures,
      this.foreground,
      this.fontWeight});

  const SText.displaySmall(this.text,
      {this.style,
      this.textTheme = STextTheme.displaySmall,
      this.muted = false,
      this.xMuted = false,
      this.letterSpacing,
      this.color,
      this.selectionColor,
      this.decoration,
      this.height,
      this.wordSpacing,
      this.fontSize,
      super.key,
      this.textAlign,
      this.maxLines,
      this.locale,
      this.overflow,
      this.semanticsLabel,
      this.softWrap,
      this.strutStyle,
      this.textDirection,
      this.textHeightBehavior,
      this.textScaler,
      this.textWidthBasis,
      this.fontStyle,
      this.backGroundColor,
      this.decorationColor,
      this.textStyle,
      this.background,
      this.textDecorationStyle,
      this.textBaseline,
      this.shadow,
      this.decorationThickness,
      this.fontFeatures,
      this.foreground,
      this.fontWeight});

  const SText.headlineLarge(this.text,
      {this.style,
      this.textTheme = STextTheme.headlineLarge,
      this.muted = false,
      this.xMuted = false,
      this.letterSpacing,
      this.color,
      this.selectionColor,
      this.decoration,
      this.height,
      this.wordSpacing,
      this.fontSize,
      super.key,
      this.textAlign,
      this.maxLines,
      this.locale,
      this.overflow,
      this.semanticsLabel,
      this.softWrap,
      this.strutStyle,
      this.textDirection,
      this.textHeightBehavior,
      this.textScaler,
      this.textWidthBasis,
      this.fontStyle,
      this.backGroundColor,
      this.decorationColor,
      this.textStyle,
      this.background,
      this.textDecorationStyle,
      this.textBaseline,
      this.shadow,
      this.decorationThickness,
      this.fontFeatures,
      this.foreground,
      this.fontWeight});

  const SText.headlineMedium(this.text,
      {this.style,
      this.textTheme = STextTheme.headlineMedium,
      this.muted = false,
      this.xMuted = false,
      this.letterSpacing,
      this.color,
      this.selectionColor,
      this.decoration,
      this.height,
      this.wordSpacing,
      this.fontSize,
      super.key,
      this.textAlign,
      this.maxLines,
      this.locale,
      this.overflow,
      this.semanticsLabel,
      this.softWrap,
      this.strutStyle,
      this.textDirection,
      this.textHeightBehavior,
      this.textScaler,
      this.textWidthBasis,
      this.fontStyle,
      this.backGroundColor,
      this.decorationColor,
      this.textStyle,
      this.background,
      this.textDecorationStyle,
      this.textBaseline,
      this.shadow,
      this.decorationThickness,
      this.fontFeatures,
      this.foreground,
      this.fontWeight});

  const SText.headlineSmall(this.text,
      {this.style,
      this.textTheme = STextTheme.headlineSmall,
      this.muted = false,
      this.xMuted = false,
      this.letterSpacing,
      this.color,
      this.selectionColor,
      this.decoration,
      this.height,
      this.wordSpacing,
      this.fontSize,
      super.key,
      this.textAlign,
      this.maxLines,
      this.locale,
      this.overflow,
      this.semanticsLabel,
      this.softWrap,
      this.strutStyle,
      this.textDirection,
      this.textHeightBehavior,
      this.textScaler,
      this.textWidthBasis,
      this.fontStyle,
      this.backGroundColor,
      this.decorationColor,
      this.textStyle,
      this.background,
      this.textDecorationStyle,
      this.textBaseline,
      this.shadow,
      this.decorationThickness,
      this.fontFeatures,
      this.foreground,
      this.fontWeight});

  const SText.titleLarge(this.text,
      {this.style,
      this.textTheme = STextTheme.titleLarge,
      this.muted = false,
      this.xMuted = false,
      this.letterSpacing,
      this.color,
      this.selectionColor,
      this.decoration,
      this.height,
      this.wordSpacing,
      this.fontSize,
      super.key,
      this.textAlign,
      this.maxLines,
      this.locale,
      this.overflow,
      this.semanticsLabel,
      this.softWrap,
      this.strutStyle,
      this.textDirection,
      this.textHeightBehavior,
      this.textScaler,
      this.textWidthBasis,
      this.fontStyle,
      this.backGroundColor,
      this.decorationColor,
      this.textStyle,
      this.background,
      this.textDecorationStyle,
      this.textBaseline,
      this.shadow,
      this.decorationThickness,
      this.fontFeatures,
      this.foreground,
      this.fontWeight});

  const SText.titleMedium(this.text,
      {this.style,
      this.textTheme = STextTheme.titleMedium,
      this.muted = false,
      this.xMuted = false,
      this.letterSpacing,
      this.color,
      this.selectionColor,
      this.decoration,
      this.height,
      this.wordSpacing,
      this.fontSize,
      super.key,
      this.textAlign,
      this.maxLines,
      this.locale,
      this.overflow,
      this.semanticsLabel,
      this.softWrap,
      this.strutStyle,
      this.textDirection,
      this.textHeightBehavior,
      this.textScaler,
      this.textWidthBasis,
      this.fontStyle,
      this.backGroundColor,
      this.decorationColor,
      this.textStyle,
      this.background,
      this.textDecorationStyle,
      this.textBaseline,
      this.shadow,
      this.decorationThickness,
      this.fontFeatures,
      this.foreground,
      this.fontWeight});

  const SText.titleSmall(this.text,
      {this.style,
      this.textTheme = STextTheme.titleSmall,
      this.muted = false,
      this.xMuted = false,
      this.letterSpacing,
      this.color,
      this.selectionColor,
      this.decoration,
      this.height,
      this.wordSpacing,
      this.fontSize,
      super.key,
      this.textAlign,
      this.maxLines,
      this.locale,
      this.overflow,
      this.semanticsLabel,
      this.softWrap,
      this.strutStyle,
      this.textDirection,
      this.textHeightBehavior,
      this.textScaler,
      this.textWidthBasis,
      this.fontStyle,
      this.backGroundColor,
      this.decorationColor,
      this.textStyle,
      this.background,
      this.textDecorationStyle,
      this.textBaseline,
      this.shadow,
      this.decorationThickness,
      this.fontFeatures,
      this.foreground,
      this.fontWeight});

  const SText.bodyLarge(this.text,
      {this.style,
      this.textTheme = STextTheme.bodyLarge,
      this.muted = false,
      this.xMuted = false,
      this.letterSpacing,
      this.color,
      this.selectionColor,
      this.decoration,
      this.height,
      this.wordSpacing,
      this.fontSize,
      super.key,
      this.textAlign,
      this.maxLines,
      this.locale,
      this.overflow,
      this.semanticsLabel,
      this.softWrap,
      this.strutStyle,
      this.textDirection,
      this.textHeightBehavior,
      this.textScaler,
      this.textWidthBasis,
      this.fontStyle,
      this.backGroundColor,
      this.decorationColor,
      this.textStyle,
      this.background,
      this.textDecorationStyle,
      this.textBaseline,
      this.shadow,
      this.decorationThickness,
      this.fontFeatures,
      this.foreground,
      this.fontWeight});

  const SText.bodyMedium(this.text,
      {this.style,
      this.textTheme = STextTheme.bodyMedium,
      this.muted = false,
      this.xMuted = false,
      this.letterSpacing,
      this.color,
      this.selectionColor,
      this.decoration,
      this.height,
      this.wordSpacing,
      this.fontSize,
      super.key,
      this.textAlign,
      this.maxLines,
      this.locale,
      this.overflow,
      this.semanticsLabel,
      this.softWrap,
      this.strutStyle,
      this.textDirection,
      this.textHeightBehavior,
      this.textScaler,
      this.textWidthBasis,
      this.fontStyle,
      this.backGroundColor,
      this.decorationColor,
      this.textStyle,
      this.background,
      this.textDecorationStyle,
      this.textBaseline,
      this.shadow,
      this.decorationThickness,
      this.fontFeatures,
      this.foreground,
      this.fontWeight});

  const SText.bodySmall(this.text,
      {this.style,
      this.textTheme = STextTheme.bodySmall,
      this.muted = false,
      this.xMuted = false,
      this.letterSpacing,
      this.color,
      this.selectionColor,
      this.decoration,
      this.height,
      this.wordSpacing,
      this.fontSize,
      super.key,
      this.textAlign,
      this.maxLines,
      this.locale,
      this.overflow,
      this.semanticsLabel,
      this.softWrap,
      this.strutStyle,
      this.textDirection,
      this.textHeightBehavior,
      this.textScaler,
      this.textWidthBasis,
      this.fontStyle,
      this.backGroundColor,
      this.decorationColor,
      this.textStyle,
      this.background,
      this.textDecorationStyle,
      this.textBaseline,
      this.shadow,
      this.decorationThickness,
      this.fontFeatures,
      this.foreground,
      this.fontWeight});

  const SText.labelLarge(this.text,
      {this.style,
      this.textTheme = STextTheme.labelLarge,
      this.muted = false,
      this.xMuted = false,
      this.letterSpacing,
      this.color,
      this.selectionColor,
      this.decoration,
      this.height,
      this.wordSpacing,
      this.fontSize,
      super.key,
      this.textAlign,
      this.maxLines,
      this.locale,
      this.overflow,
      this.semanticsLabel,
      this.softWrap,
      this.strutStyle,
      this.textDirection,
      this.textHeightBehavior,
      this.textScaler,
      this.textWidthBasis,
      this.fontStyle,
      this.backGroundColor,
      this.decorationColor,
      this.textStyle,
      this.background,
      this.textDecorationStyle,
      this.textBaseline,
      this.shadow,
      this.decorationThickness,
      this.fontFeatures,
      this.foreground,
      this.fontWeight});

  const SText.labelMedium(this.text,
      {this.style,
      this.textTheme = STextTheme.labelMedium,
      this.muted = false,
      this.xMuted = false,
      this.letterSpacing,
      this.color,
      this.selectionColor,
      this.decoration,
      this.height,
      this.wordSpacing,
      this.fontSize,
      super.key,
      this.textAlign,
      this.maxLines,
      this.locale,
      this.overflow,
      this.semanticsLabel,
      this.softWrap,
      this.strutStyle,
      this.textDirection,
      this.textHeightBehavior,
      this.textScaler,
      this.textWidthBasis,
      this.fontStyle,
      this.backGroundColor,
      this.decorationColor,
      this.textStyle,
      this.background,
      this.textDecorationStyle,
      this.textBaseline,
      this.shadow,
      this.decorationThickness,
      this.fontFeatures,
      this.foreground,
      this.fontWeight});

  const SText.labelSmall(this.text,
      {this.style,
      this.textTheme = STextTheme.labelSmall,
      this.muted = false,
      this.xMuted = false,
      this.letterSpacing,
      this.color,
      this.selectionColor,
      this.decoration,
      this.height,
      this.wordSpacing,
      this.fontSize,
      super.key,
      this.textAlign,
      this.maxLines,
      this.locale,
      this.overflow,
      this.semanticsLabel,
      this.softWrap,
      this.strutStyle,
      this.textDirection,
      this.textHeightBehavior,
      this.textScaler,
      this.textWidthBasis,
      this.fontStyle,
      this.backGroundColor,
      this.decorationColor,
      this.textStyle,
      this.background,
      this.textDecorationStyle,
      this.textBaseline,
      this.shadow,
      this.decorationThickness,
      this.fontFeatures,
      this.foreground,
      this.fontWeight});

  @override
  Widget build(BuildContext context) {
    return Text(
      text,
      style: style ??
          textTheme?.value(context)?.copyWith(
                fontWeight: fontWeight,
                color: color,
                fontSize: fontSize,
                background: background,
                decoration: decoration,
                decorationColor: decorationColor,
                decorationStyle: textDecorationStyle,
                decorationThickness: decorationThickness,
                fontStyle: fontStyle,
                textBaseline: textBaseline,
                letterSpacing: letterSpacing,
                wordSpacing: wordSpacing,
                height: height,
                foreground: foreground,
                backgroundColor: backGroundColor,
                fontFeatures: fontFeatures,
                locale: locale,
                overflow: overflow,
                shadows: shadow,
              ),
      textAlign: textAlign,
      maxLines: maxLines,
      locale: locale,
      overflow: overflow,
      semanticsLabel: semanticsLabel,
      softWrap: softWrap,
      strutStyle: strutStyle,
      textDirection: textDirection,
      textHeightBehavior: textHeightBehavior,
      textScaler: textScaler,
      textWidthBasis: textWidthBasis,
      selectionColor: selectionColor,
      key: key,
    );
  }
}
